<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:sec="http://www.springframework.org/schema/security"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

    <util:properties id="prop" location="classpath:/prop/global-${spring.profiles.active}.properties" />

    <!-- 리소스 파일 예외 처리 -->
    <sec:http pattern="/resources/**" security="none" />
    <sec:http pattern="/map/**" security="none" />
    <sec:http pattern="/icon/**" security="none" />
    <sec:http pattern="/upload/**" security="none" />
    <sec:http pattern="/error/**" security="none" />
    <sec:http pattern="/test/**" security="none" />
    <sec:http pattern="/favicon.ico" security="none" />
<!--    <sec:cors configuration-source-ref="com.plx.app.security.WebSecurityConfig"/>-->

    <!-- 인터셉터, 로그인, 로그아웃, csrf 설정 -->
    <sec:http auto-config='true' use-expressions="true">
    	<sec:headers>
    		<sec:frame-options disabled="true" /> <!-- x-frame option 설정 -->
    	</sec:headers>
        <sec:intercept-url pattern="/favicon.ico" access="permitAll"/>
        <sec:intercept-url pattern="/login/**" access="permitAll" />
        <sec:intercept-url pattern="/ws/**" access="permitAll" />
        <sec:intercept-url pattern="/itf/**" access="permitAll" />
        <sec:intercept-url pattern="/api/**" access="permitAll" />
        <sec:intercept-url pattern="/adm/user/**" access="hasRole('ROLE_ADMIN')"/>
        <!-- <sec:intercept-url pattern="/adm/**" access="hasAnyRole('ROLE_USER','ROLE_MANAGER','ROLE_ADMIN')"/> -->
        <sec:intercept-url pattern="/adm/**" access="permitAll"/>
<!--        <sec:intercept-url pattern="/viewer/**" access="hasAnyRole('ROLE_USER','ROLE_MANAGER','ROLE_ADMIN')"/>-->
        <sec:intercept-url pattern="/viewer/**" access="permitAll"/>
<!--        <sec:intercept-url pattern="/**" access="isAuthenticated()" /> -->
        <!-- SSL 설정 -->
        <sec:intercept-url pattern="/**" access="isAuthenticated()" requires-channel="#{prop['protocol.type']}" />
		<sec:port-mappings>
        	<sec:port-mapping http="#{prop['http.port']}" https="#{prop['https.port']}" />
        </sec:port-mappings>

        <!-- <sec:custom-filter after="PRE_AUTH_FILTER" ref="customFilter" /> -->
        <sec:custom-filter after="FORM_LOGIN_FILTER" ref="customFilter" />
		<sec:access-denied-handler ref="accessDeniedExceptionHandler" />
        <sec:form-login login-page="/login/index.do"
                        login-processing-url="/login/loginChk.json"
                        username-parameter="usrId"
                        password-parameter="usrPwd"
                        authentication-success-handler-ref="loginSuccessHandler"
						authentication-failure-handler-ref="loginFailureHandler" />
        <sec:logout logout-url="/login/logout.do" logout-success-url="/login/index.do" invalidate-session="true" delete-cookies="JSESSIONID"/>

        <sec:session-management invalid-session-url="/login/index.do">
        	<sec:concurrency-control max-sessions="5" expired-url="/login/index.do" error-if-maximum-exceeded="false" session-registry-alias="sessionRegistry"/>
        </sec:session-management>
        <sec:csrf disabled="true"/>
    </sec:http>

  	<!-- 로그인 관련 핸들러 -->
	<bean id="loginSuccessHandler" class="com.plx.app.security.CustomLoginSuccessHandler" />
	<bean id="loginFailureHandler" class="com.plx.app.security.CustomLoginFailureHandler" />
	<bean id="accessDeniedExceptionHandler" class="com.plx.app.security.CustomAccessDeniedHandler" />
    <bean id="logoutSuccessHandler" class="com.plx.app.security.CustomLogoutSuccessHandler" />
    <bean id="customFilter" class="com.plx.app.security.CustomFilter" />
    <!-- <bean id="anonymousAuthenticationProvider" class="org.springframework.security.authentication.AnonymousAuthenticationProvider" /> -->

	<!-- 로그인 성공시 필요 bean -->
	<bean id="usrInfoService" class="com.plx.app.admin.service.UsrInfoServiceImpl" />
    <bean id="usrgrpInfoService" class="com.plx.app.admin.service.UsrgrpInfoServiceImpl" />
    <bean id="systemInfoService" class="com.plx.app.admin.service.SystemInfoServiceImpl" />

    <bean id="encoderBCrypt" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
 	<sec:authentication-manager>
  		<sec:authentication-provider>
  			<sec:password-encoder ref="encoderBCrypt" />
  			<sec:jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="SELECT usr_id AS username, usr_pwd AS password, usr_status AS enabled FROM tb_usr_info WHERE usr_id=?"
				authorities-by-username-query="SELECT ui.usr_id AS username, gi.grp_type AS authority FROM tb_usr_info ui JOIN tb_usrgrp_info gi ON ui.grp_no = gi.grp_no WHERE ui.usr_id=?" />
  		</sec:authentication-provider>
 	</sec:authentication-manager>
</beans>